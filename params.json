{"name":"Android-next","tagline":"Android Next 公共组件库","body":"Android Next 公共组件库\r\n======\r\nTasks, Views, Widgets, Http, Utils\r\n------\r\n\r\n## 项目介绍\r\n\r\n\r\n这个库是我在日常开发过程中积累下来的一些可复用组件，有一些是原创的，有一些是修改开源项目的，有一些则完全是从Android源码/Apache-Commons源码中复制过来的，大部分都在我的工作项目和个人项目中有实际使用案例，具体就不一一说明了\r\n\r\n\r\n## 最新版本\r\n\r\n已经部署到Maven Central，可以直接使用\r\n\r\n- **1.0.5** 2014.12.22\r\n- **1.0.4** 2014.09.15\r\n\r\n------\r\n\r\n## 开始使用\r\n\r\nGradle集成方法：\r\n\r\n```groovy\r\n\r\n    // core 核心库, 格式:jar和aar\r\n    compile 'com.mcxiaoke.next:core:1.0.+'\r\n    \r\n    // http HTTP组件, 格式:jar和aar\r\n    compile 'com.mcxiaoke.next:http:1.0.+'\r\n    \r\n    // ui UI组件, 格式:aar\r\n    compile 'com.mcxiaoke.next:ui:1.0.+'\r\n    \r\n    // extra-abc 依赖support-v7 AppCompat 格式:aar\r\n    compile 'com.mcxiaoke.next:extra-abc:1.0.+'\r\n    \r\n    \r\n```\r\n\r\n------\r\n\r\n\r\n## 模块结构\r\n\r\n分为以下几个模块：\r\n\r\n#### core 核心组件\r\n\r\n包含异步任务组件，缓存组件，基础Activity和Service，还有一些工具类，按Java包介绍如下：\r\n\r\n- **com.mcxiaoke.next.annotation** 两个简单的Annotation，标注是否线程安全，纯标注用\r\n\r\n- **com.mcxiaoke.next.app** 基础类，包含:\r\n    * NextBaseActivity 基础Activity，添加了一些ActionBar相关的封装方法\r\n    * NextBaseFragment 基础Fragment，添加了ActionBar和Activity相关的一些封装方法\r\n    * MultiIntentService 类似于IntentService，但是可以多个异步任务并发执行，可以在所有任务执行完成后自动stopSelf()，具体请看源码\r\n    \r\n\r\n- **com.mcxiaoke.next.cache** 简单缓存类，包含内存缓存MemoryCache和磁盘缓存DiscCache，使用非常简单，可定制\r\n\r\n- **com.mcxiaoke.next.collection** 几个常用的集合类，包含：NoDuplicatesArrayList, NoDuplicatesCopyOnWriteArrayList, NoDuplicatesLinkedList和WeakFastHashMap\r\n\r\n- **com.mcxiaoke.next.common** 包含NextMessage，类似于Android系统的Message类，但是使用更方便，能支持更多数据类型\r\n\r\n- **com.mcxiaoke.next.db** 包含两个简单的数据库相关的工具类\r\n\r\n- **com.mcxiaoke.next.geo**  包含LastLocationFinder，用于快速获取上次定位位置\r\n\r\n- **com.mcxiaoke.next.io** 包含CountingInputStream, CountingOutputStream, StringBuilderWriter, BoundedInputStream等IO数据流相关的封装类，方便使用\r\n\r\n- **com.mcxiaoke.next.task** 包含异步任务执行模块相关的类，详细的使用见后面的说明\r\n    * TaskQueue 核心类，对外接口，支持单例使用\r\n    * TaskCallback 回调接口\r\n\r\n\r\n- **com.mcxiaoke.next.utils** 包含了很多使用简单但又非常有用的小工具类:\r\n    * AndroidUtils Android系统相关的一些工具类，包括文件路径处理，Toast显示，屏幕方向，组件启用禁用，获取App签名信息等\r\n    * AssertUtils Assert类，Null检查，对象检查，数组检查等\r\n    * BitmapUtils Bitmap缩放，旋转，圆角，阴影，裁剪等方法\r\n    * CryptoUtils 加密算法相关的工具方法，支持MD5/SHA1/SHA256/AES/HEX等\r\n    * IOUtils IO操作工具类，包含常用的文件复制/字符串/数组/列表/数据流读写方法\r\n    * MimeUtils MIME工具类，支持根据文件扩展名获取MIME类型\r\n    * NetworkUtils 网络工具类，支持获取网络类型，设置代理等\r\n    * ProxyUtils WebView代理设置工具类，这个可能已经失效了\r\n    * ReflectionUtils Java反射相关的工具类\r\n    * StringUtils 字符串工具类，支持常用的字符串合并/分割/比较/转换/判断等操作\r\n    * ViewUtils View相关的几个工具方法，例如getScreenRawSize/getActionBarHeightInDp/getStatusBarHeightInDp/getResourceValue等\r\n    * ZipUtils 支持ZIP文件压缩/解压缩\r\n    \r\n\r\n------    \r\n\r\n\r\n#### http HTTP组件\r\n\r\n包含一个经过简单封装的HTTP操作模块，简化常用的网络请求操作\r\n\r\n - **NextClient** 网络组件的核心类\r\n - **NextParams** HTTP参数封装和处理\r\n - **NextRequest** HTTP Request\r\n - **NextResponse** HTTP Response\r\n\r\n详细的使用方法见后面的介绍\r\n\r\n------\r\n\r\n\r\n#### ui UI组件\r\n\r\n一些常用的UI控件，可简化日常开发，包含：\r\n\r\n- **AlertDialogFragment和ProgressDialogFragment** 封装好的DialogFragmen，接口简单，同时有4.0版本和使用support-v4的版本\r\n\r\n- **EndlessListView** 封装的ListView，添加了支持加载更多数据的接口和FooterView展示\r\n\r\n- **CheckableFrameLayout** Checkable布局系列，包含几种常用布局的Checkable封装，附带一个很有用的CheckableImageView\r\n\r\n- **NoPressStateFrameLayout** NoPress布局系统，包含几种常用布局的NoPressState封装\r\n\r\n- **SquaredFrameLayout** Squared布局系列，包含几个常用布局的Squared封装，正方形布局\r\n\r\n- **typeface** typeface包里包含一些支持字体设置的常用控件，如Button/TextView/CheckBox等\r\n\r\n- **AspectRatioImageView** 定制的ImageView，缩放时会保持长宽比\r\n\r\n- **CircularImageView** 圆形ImageView，一般用作头像等显示，不建议使用，github有更好的项目\r\n\r\n- **FixedRatioImageView** 强制高宽比的ImageView，可选以水平或垂直方向为基准，另外还有一个强制保持正方形的SquaredImageView\r\n\r\n- **AdvancedShareActionProvider** 高级版的ShareActionProvider，支持自定义分享菜单列表项，自定图标和分享内容等，包含4.0的版本和使用AppCompat的版本，具体可以看源码和示例\r\n\r\n- **ArrayAdapterCompat** 增强版的ArrayAdapter，支持2.3以上版本，增加很多实用方法\r\n\r\n\r\n------\r\n\r\n#### samples 示例\r\n\r\n包含几个常用模块的示例，主要是TaskQueue/NextClient/AdvancedShareActionProvider的示例\r\n\r\n\r\n------\r\n\r\n## 使用说明\r\n\r\n#### 异步任务模块\r\n\r\n```java\r\n\r\n        // you can use TaskCallable or just Callable\r\n        final TaskCallable<String> callable=new TaskCallable<String>(\"name\") {\r\n            @Override\r\n            public String call() throws Exception {\r\n                final String url=\"https://github.com/mcxiaoke/Android-Next/raw/master/README.md\";\r\n                final NextResponse response=NextClient.get(url);\r\n                return response.string();\r\n            }\r\n        };\r\n        // task callback\r\n        final TaskCallback<String> callback=new SimpleTaskCallback<String>() {\r\n            @Override\r\n            public void onTaskStarted(final String tag, final Bundle extras) {\r\n                // task started, main thread\r\n            }\r\n\r\n            @Override\r\n            public void onTaskSuccess(final String value, final Bundle extras) {\r\n                // task success, main thread\r\n                mTextView.setText(value);\r\n            }\r\n\r\n            @Override\r\n            public void onTaskFailure(final Throwable ex, final Bundle extras) {\r\n                // task failure, main thread\r\n            }\r\n        };\r\n        // add task, execute concurrently\r\n        TaskQueue.getDefault().add(callable,callback,this);\r\n        // add task, execute serially\r\n        TaskQueue.getDefault().addSerially(callable, callback, this);\r\n\r\n        // set custom task executor\r\n        TaskQueue.getDefault().setExecutor(executor);\r\n        //  set yes/no check activity/fragment lifecycle\r\n        TaskQueue.getDefault().setEnableCallerAliveCheck(true);\r\n        // save task tag for cancel the task\r\n        final String tag=TaskQueue.getDefault().add(callable,callback,this);\r\n        TaskQueue.getDefault().cancel(tag);\r\n        // cancel the task by caller\r\n        TaskQueue.getDefault().cancelAll(this);\r\n        // cancel all task\r\n        TaskQueue.getDefault().cancelAll();\r\n\r\n```\r\n\r\n\r\n#### HTTP模块\r\n\r\n```java\r\n\r\n            final String url = \"https://github.com/mcxiaoke/Android-Next/raw/master/README.md\";\r\n\r\n            // simple use\r\n            // NextResponse response = NextClient.get(url);\r\n\r\n            // advanced use\r\n            final NextClient client = new NextClient();\r\n            final NextRequest request = NextRequest.newBuilder()\r\n                    .url(url)\r\n                    .encoding(\"UTF-8\")\r\n                    .method(\"POST\")\r\n                    .header(\"X-UDID\", \"cxgdg4543gd64tgdgs2tgdgst4\")\r\n                    .param(\"image\", new File(\"IMG_20141222.jpg\"), \"image/jpeg\")\r\n                    .param(\"param1\", \"value1\")\r\n                            // http progress callback, for monitor upload/download file progress\r\n                    .callback(new ProgressCallback() {\r\n                        @Override\r\n                        public void onProgress(final long currentSize, final long totalSize) {\r\n                            Log.v(TAG, \"http progress: \" + currentSize * 100 / totalSize);\r\n                        }\r\n                    }).build();\r\n\r\n\r\n            final NextResponse response = client.execute(request);\r\n            // get response meta-data\r\n            Log.v(TAG, \"http response successful: \" + response.successful());\r\n            Log.v(TAG, \"http response statusCode: \" + response.code());\r\n            Log.v(TAG, \"http response statusMessage: \" + response.message());\r\n            Log.v(TAG, \"http response contentLength: \" + response.contentLength());\r\n            Log.v(TAG, \"http response contentType: \" + response.contentType());\r\n            // get 301/302/30x location header\r\n            Log.v(TAG, \"http response location: \" + response.location());\r\n            Log.v(TAG, \"http response Server:\" + response.header(\"Server\"));\r\n            Log.v(TAG, \"http response Connection: \" + response.header(\"Connection\"));\r\n            // get body as string\r\n            Log.v(TAG, \"http response content: \" + response.string());\r\n            // get body as  bytes\r\n            final byte[] bytes = response.bytes();\r\n            final Bitmap bitmap1 = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\r\n            // get body as  stream\r\n            final InputStream stream = response.stream();\r\n            final Bitmap bitmap2 = BitmapFactory.decodeStream(stream);\r\n            // get body as reader\r\n            final InputStreamReader reader = response.reader(Charsets.UTF_8);\r\n\r\n```\r\n\r\n\r\n\r\n#### 缓存模块\r\n\r\n\r\n```java\r\n\r\n        // create memory cache, internally using map\r\n        final IMemoryCache<String, Object> memoryCache = CacheFactory.createCache();\r\n        // create memory cache, internally using lru cache\r\n        // final IMemoryCache<String,Object> memoryCache=CacheFactory.createLruCache(100);\r\n        memoryCache.put(\"strKey\", \"value\");\r\n        memoryCache.put(\"intKey\", 123);\r\n        memoryCache.put(\"boolKey\", false);\r\n        memoryCache.put(\"objKey\", new TaskQueue());\r\n        final String value = (String) memoryCache.get(\"strKey\");\r\n\r\n        final Context context = mockContext();\r\n        // default disc cache, use /data/data/package-name/cache/.disc/ dir\r\n        final DiscCache discCache = new DiscCache(context);\r\n        // use custom /data/data/package-name/cache/json-cache/ dir\r\n        //final DiscCache discCache=new DiscCache(context,\"json-cache\");\r\n        // use custom /sdcard/Android/data/package-name/cache/json-cache/ dir\r\n        //final DiscCache discCache=new DiscCache(context,\"json-cache\",DiscCache.MODE_EXTERNAL);\r\n        discCache.setCacheDir(\"dirName\");\r\n        discCache.setCharset(\"UTF-8\");\r\n        discCache.setFileNameGenerator(nameGenerator);\r\n        final byte[] bytes = new byte[100];\r\n        discCache.put(\"bytes\", bytes);\r\n        discCache.put(\"stream\", new ByteArrayInputStream(bytes));\r\n        discCache.put(\"text\", \"some text for cache\");\r\n        final byte[] bytesValue = discCache.getBytes(\"bytes\");\r\n        final File file = discCache.getFile(\"stream\");\r\n        final String stringValue = discCache.get(\"text\");\r\n        discCache.remove(\"cacheKey\");\r\n        discCache.clear();\r\n        discCache.delete(new FileFilter() {\r\n            @Override\r\n            public boolean accept(final File pathname) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n\r\n```\r\n\r\n------\r\n\r\n\r\n##其它问题\r\n\r\n发现任何问题可以提issue\r\n\r\n\r\n------\r\n\r\n\r\n##License\r\n\r\n\r\n    Copyright 2013 - 2014 Xiaoke Zhang\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}